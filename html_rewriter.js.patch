--- pkg/html_rewriter.js
+++ pkg/html_rewriter.js
@@ -1,7 +1,7 @@
 let imports = {};
 imports['__wbindgen_placeholder__'] = module.exports;
 let wasm;
-const { awaitPromise } = require(String.raw`./asyncify.js`);
+const { awaitPromise, setWasmExports, wrap } = require(String.raw`./asyncify.js`);
 const { TextDecoder, TextEncoder } = require(String.raw`util`);
 
 const heap = new Array(32).fill(undefined);
@@ -233,6 +233,7 @@ class Comment {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.comment_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     * @param {string} content
@@ -242,6 +243,7 @@ class Comment {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.comment_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     * @param {string} content
@@ -251,11 +253,13 @@ class Comment {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.comment_replace(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     */
     remove() {
         wasm.comment_remove(this.ptr);
+        return this;
     }
     /**
     * @returns {boolean}
@@ -364,6 +368,7 @@ class DocumentEnd {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.documentend_append(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
 }
 module.exports.DocumentEnd = DocumentEnd;
@@ -397,6 +402,7 @@ class Element {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.element_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     * @param {string} content
@@ -406,6 +412,7 @@ class Element {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.element_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     * @param {string} content
@@ -415,11 +422,13 @@ class Element {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.element_replace(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     */
     remove() {
         wasm.element_remove(this.ptr);
+        return this;
     }
     /**
     * @returns {boolean}
@@ -495,6 +504,7 @@ class Element {
         var ptr1 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len1 = WASM_VECTOR_LEN;
         wasm.element_setAttribute(this.ptr, ptr0, len0, ptr1, len1);
+        return this;
     }
     /**
     * @param {string} name
@@ -503,6 +513,7 @@ class Element {
         var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.element_removeAttribute(this.ptr, ptr0, len0);
+        return this;
     }
     /**
     * @param {string} content
@@ -512,6 +523,7 @@ class Element {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.element_prepend(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     * @param {string} content
@@ -521,6 +533,7 @@ class Element {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.element_append(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     * @param {string} content
@@ -530,11 +543,13 @@ class Element {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.element_setInnerContent(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     */
     removeAndKeepContent() {
         wasm.element_removeAndKeepContent(this.ptr);
+        return this;
     }
 }
 module.exports.Element = Element;
@@ -584,6 +599,7 @@ class EndTag {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.endtag_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     * @param {string} content
@@ -593,11 +609,13 @@ class EndTag {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.endtag_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     */
     remove() {
         wasm.endtag_remove(this.ptr);
+        return this;
     }
 }
 module.exports.EndTag = EndTag;
@@ -643,25 +661,27 @@ class HTMLRewriter {
         var ptr0 = passStringToWasm0(selector, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.htmlrewriter_on(this.ptr, ptr0, len0, addHeapObject(handlers));
+        return this;
     }
     /**
     * @param {any} handlers
     */
     onDocument(handlers) {
         wasm.htmlrewriter_onDocument(this.ptr, addHeapObject(handlers));
+        return this;
     }
     /**
     * @param {Uint8Array} chunk
     */
-    write(chunk) {
+    async write(chunk) {
         var ptr0 = passArray8ToWasm0(chunk, wasm.__wbindgen_malloc);
         var len0 = WASM_VECTOR_LEN;
-        wasm.htmlrewriter_write(this.ptr, ptr0, len0);
+        await wrap(this, wasm.htmlrewriter_write, this.ptr, ptr0, len0);
     }
     /**
     */
-    end() {
-        wasm.htmlrewriter_end(this.ptr);
+    async end() {
+        await wrap(this, wasm.htmlrewriter_end, this.ptr);
     }
     /**
     * @returns {number}
@@ -702,6 +722,7 @@ class TextChunk {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.textchunk_before(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     * @param {string} content
@@ -711,6 +732,7 @@ class TextChunk {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.textchunk_after(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     * @param {string} content
@@ -720,11 +742,13 @@ class TextChunk {
         var ptr0 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
         var len0 = WASM_VECTOR_LEN;
         wasm.textchunk_replace(this.ptr, ptr0, len0, isLikeNone(content_type) ? 0 : addHeapObject(content_type));
+        return this;
     }
     /**
     */
     remove() {
         wasm.textchunk_remove(this.ptr);
+        return this;
     }
     /**
     * @returns {boolean}
@@ -875,7 +899,8 @@ module.exports.__wbg_new_917809a3e20a4b00 = function(arg0, arg1) {
 };
 
 module.exports.__wbg_instanceof_Promise_c6535fc791fcc4d2 = function(arg0) {
-    var ret = getObject(arg0) instanceof Promise;
+    var obj = getObject(arg0);
+    var ret = (obj instanceof Promise) || (Object.prototype.toString.call(obj) === '[object Promise]');
     return ret;
 };
 
@@ -921,5 +946,6 @@ const bytes = require('fs').readFileSync(path);
 const wasmModule = new WebAssembly.Module(bytes);
 const wasmInstance = new WebAssembly.Instance(wasmModule, imports);
 wasm = wasmInstance.exports;
+setWasmExports(wasm);
 module.exports.__wasm = wasm;
 
